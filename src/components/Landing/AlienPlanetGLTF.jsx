/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Author: dnslv (https://sketchfab.com/deny.s.trevisan)
License: CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)
Source: https://sketchfab.com/3d-models/alien-planet-bbb2e0eeb0b34247b8a70655c780fad5
Title: Alien Planet
*/

import { useEffect, useRef, useState } from "react";
import { useGLTF } from "@react-three/drei";

import { Float } from "@react-three/drei";

import * as THREE from "three";
import { useFrame } from "@react-three/fiber";

import { useControls } from "leva";

import { ShaderMaterial } from "three";

import state  from "@components/state";

export default function AlienPlanetGLTF(props) {
  const { nodes, materials } = useGLTF("/models/alien_planet_1k.glb");

  const alienPlanetRef = useRef();

  useFrame((state, delta) => {
    alienPlanetRef.current.rotation.y -= 0.0005;
  });

  useEffect(() => {
    state.alienPlanet = alienPlanetRef.current;
  }, []);

  // const { color, float, position } = useControls("Alien Planet", {
  //   position: {
  //     value: [0.75, -1.5, -2],
  //     step: 0.1,
  //     label: "Position",
  //   },
  //   color: {
  //     value: "#40dbad",
  //     label: "Color",
  //   },
  //   float: {
  //     value: false,
  //     label: "Float",
  //   },
  // });

  return (
    <>
      <directionalLight
        intensity={5}
        rotation={[Math.PI, 0, 0]}
        position={[-2, 1.5, -4]}
        color={new THREE.Color(Number("0x" + "#40dbad".replace("#", "")))}
      />
      <Float
        speed={0} // Animation speed, defaults to 1
        rotationIntensity={1} // XYZ rotation intensity, defaults to 1
        floatIntensity={1} // Up/down float intensity, works like a multiplier with floatingRange,defaults to 1
        floatingRange={[-0.4, 0.4]} // Range of y-axis values the object will float within, defaults to [-0.1,0.1]
      >
        <group
          {...props}
          position={[0.75, -1.5, -2]}
          rotation={[0, 0, 0]}
          scale={1.2}
          dispose={null}
          ref={alienPlanetRef}
        >
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.Object_4.geometry}
            material={materials.Planet}
          />
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.Object_6.geometry}
            material={materials.Clouds}
            scale={1.025}
          />
        </group>
      </Float>
    </>
  );
}

useGLTF.preload("/models/alien_planet_1k.glb");
